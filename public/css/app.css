.info-box {
  background-color: #fff;
  margin-bottom: 2rem;
  border-bottom: 1px solid #dcdcdc;
}

.info-box__title {
  border-top: 3px solid #333;
  padding: 1rem .75rem .5rem;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

.info-box__title > h1,
.info-box__title > h2,
.info-box__title > h3,
.info-box__title > h4,
.info-box__title > h5,
.info-box__title > h6 {
  margin: 0;
}

.info-box__title > .button-group {
  float: right;
}

.info-box__content {
  padding: .75rem;
}

.info-box__title + .info-box__content {
  border-top: 1px solid #dcdcdc;
}

.info-box__content + .info-box__title {
  border-top: 0;
  padding-top: 1.25rem;
}

.info-box__content > h1,
.info-box__content > h2,
.info-box__content > h3,
.info-box__content > h4,
.info-box__content > h5,
.info-box__content > h6 {
  margin: 0;
}

.block-list {
  list-style: none;
  margin: 0;
}

.block-list li {
  padding: .75rem 1.5rem;
}

.block-list li::after {
  clear: both;
  content: "";
  display: block;
}

.block-list li.callout {
  border: 0;
  padding-left: .75rem;
  padding-right: .75rem;
}

.info-box__content > .block-list {
  margin-left: -.75rem;
  margin-right: -.75rem;
  margin-bottom: -.75rem;
}

.price-list li {
  background-color: #fff;
}

.price-list .transaction {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  position: relative;
}

.price-list .transaction:after {
  display: block;
  position: absolute;
  left: 1.5rem;
  right: 1.5rem;
  overflow: hidden;
  content: ".........................................................................................................................................................................................";
  color: #ccc;
  font-size: 1rem;
  letter-spacing: .225rem;
}

.price-list .item {
  z-index: 2;
  background-color: #fff;
}

.price-list .item.right {
  padding-left: .4rem;
  padding-right: .3rem;
}

.price-list .item--success {
  border-radius: 2px;
  background-color: #e6efc2;
}

.price-list .item--warning {
  border-radius: 2px;
  background-color: #fbe3e4;
}

.price-list .caption {
  clear: both;
  margin: -.2rem auto 0 auto;
  display: block;
  color: #aaa;
}

.price-list .deposit_due .item {
  padding-left: 2rem;
  padding-right: 2rem;
  font-style: italic;
  color: #ccc;
  font-weight: bold;
}

.price-list .callout.total {
  margin-top: .75rem;
}

.price-list .callout.total,
.price-list .callout.total .item {
  background-color: #f4f9fd;
}

.price-list .callout.deposit_due,
.price-list .callout.deposit_due .item {
  background-color: #fdf6e1;
}

.price-list .callout.balance,
.price-list .callout.balance .item {
  background-color: #d7e9f7;
}

.roominglist .pusher {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
}

.roominglist .pusher > .grid {
  height: 90%;
}

.roominglist .pusher .grid {
  -webkit-box-flex: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.roominglist .pusher .grid .column {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
}

.roominglist .pusher .grid .column.eleven {
  width: 70%;
}

.roominglist .pusher .grid .column.five {
  width: 30%;
}

.roominglist .pusher .grid .column h1 {
  -ms-flex-negative: 0;
      flex-shrink: 0;
}

.roominglist .pusher .grid .column .scroll {
  padding: 0 20px;
  -webkit-box-flex: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
  overflow-x: hidden;
  overflow-y: scroll;
  margin: 0;
}

.roominglist .pusher .grid .column .scroll::-webkit-scrollbar {
  width: 8px;
}

.roominglist .pusher .grid .column .scroll::-webkit-scrollbar-track {
  background-color: rgba(57, 57, 57, 0.1);
  border-radius: 6px;
}

.roominglist .pusher .grid .column .scroll::-webkit-scrollbar-thumb {
  border-radius: 6px;
  background-color: rgba(156, 156, 156, 0.6);
}

.roominglist .pusher .ticket {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.roominglist .pusher .ticket .meta {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  margin-left: 1rem;
}

.roominglist .pusher .js-droppable > .empty {
  display: none;
}

.roominglist .pusher .js-droppable > .empty:only-child {
  display: block;
  padding: 1em;
  font-style: italic;
  color: #dcdcdc;
}

.roominglist .pusher .ui-draggable-handle {
  cursor: move;
}

ul {
  padding-left: 0;
}

dl {
  margin-top: 0;
}

dl > dt {
  font-weight: bold;
}

dl > dd {
  margin-left: 0;
}

.ui.container {
  padding-bottom: 3rem;
}

.ui.checkbox label {
  cursor: pointer;
}

.hastickets .noticket {
  display: none;
}

h1 .ui.label,
h2 .ui.label,
h3 .ui.label,
h4 .ui.label,
h5 .ui.label,
h6 .ui.label,
.ui.heading .ui.label {
  position: relative;
  top: -.5833em;
}

.ui.menu .toc.item {
  display: none;
}

.ui.pagination .pages {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@media only screen and (max-width: 768px) {
  .ui.pagination .pages .item {
    display: none;
  }

  .ui.pagination .pages .active.item {
    display: inherit;
  }
}

@media only screen and (max-width: 900px) {
  .ui.menu.page-nav .left.menu {
    display: none;
  }

  .ui.menu .toc.item {
    display: block;
  }
}

tr.canceled th,
tr.canceled th > *,
tr.canceled td,
tr.canceled td > * {
  text-decoration: line-through !important;
  font-style: italic;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */